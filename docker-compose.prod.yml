version: "3.8"

services:
  # FastAPI 백엔드 서비스 (프로덕션)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_backend_prod
    ports:
      - "8000:8000"
    env_file:
      - env.production
    environment:
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_PORT=${MYSQL_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=0
      - ENVIRONMENT=production
    volumes:
      - ./backend/uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 백엔드 워커 서비스 (가상 피팅 처리)
  backend-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_worker_prod
    command: ["python", "scripts/start_worker.py"]
    env_file:
      - env.production
    environment:
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_PORT=${MYSQL_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=0
      - ENVIRONMENT=production
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      - backend
    restart: unless-stopped

  # React 프론트엔드 서비스 (프로덕션)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: react_frontend_prod
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 리버스 프록시 (선택사항)
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped